# 初めに
DB設計を学ぶにあたり"達人に学ぶDB設計指南書"を読んでいる。
理解を深めるために、読んだ内容を自分なりにまとめていく。

# 内容
## 第1章 システムとデータベース
### 用語の定義
* DBMS
* SQL
* スキーマ(Scheme): 枠組みや構図という意味を持つ。DBにおいてはデータ構造やフォーマットという意味を持つ。
* エンティティ(Entity): 日本語としては＂実体＂と訳される。
* ER図

### DBの歴史

### DBにおける設計とは
:::note info 基本的にDBMSが異なっても設計の方法は影響を受けない。
1. 要件定義: 何をデータベースを使ってやりたいかを決める。 例: Amazonの在庫管理やツイッターのツイート本文やリプライいいね数など
2. 設計: データベースの構造を決める。細分化したものを後述する。 例: テーブルの数、カラムの数、カラムの型、インデックスの有無
3. 開発（実装）: 実際にシステムを作る。プログラムのコーディングや物理サーバーやネットワーク機器の調達なども含まれる。
4. テスト: 組み上がったシステムが実用に耐えうる品質であるかを試験する。
:::

本書は設計に焦点を当てている。

### DBMSの種類
* RDB(Relational DataBase 関係データベース): 現在最も広く利用されているデータベース。何も断りをなく＂データベース＂と言うと、リレーショナルデータベースのことを指す。
* OODB(Object Oriented Database オブジェクト指向データベース): 
* XMLDB(XML Database): XMLというタグでデータ管理を行うマークアップ言語形式でデータを保存する
* KVS(Key Value Store): データをKeyとValueの組み合わせだけの単純なデータ型で表現するデータベース
* 階層型データベース(略称は特になし): データを階層構造（木構造）で表現するデータベース

### 主なDBMSフレームワーク
* Oracle
* SQL Server
* PostgreSQL
* MySQL

### スキーマとは
:::note info ここは絵を描きたい
* 外部スキーマ: ユーザーが見るデータの構造（要件定義）
* 概念スキーマ: 開発者が見るデータの構造。物理層の制約にとらわれない。（論理設計）
* 内部スキーマ: データベース管理者/コンピュータが見るデータの構造
:::

:::note info 概念スキーマがないと変更に弱くなる
外部スキーマと内部スキーマの中をとりもつ。
もし概念スキーマがない場合、外部スキーマを変更すると内部スキーマにも影響が出る。
外部スキーマを変更するたびに内部スキーマも変更する必要があるため、変更に弱い設計になる。
:::

## 第2章 論理設計と物理設計
### 論理設計
エンティティとは
1. エンティティの抽出: 要するに何をデータとして登録するかを決める
2. エンティティの定義: 列となる要素を決める（属性(attribute)というのが正式な用語）
3. 正規化: データを整理する作業。更新（データの登録、変更、削除）が整合的に行えるようにすることが目的。
4. ER図の作成: Entity Relationship Diagramの略。正規化を行うとテーブルが増えていくので、それらの関係性（Relationship）を表現するために必要。
   大規模システムになると何百という数のテーブル（エンティティ）が作られる。

RDBの論理設計では3.の正規化が最も重要な土台となる。
一口に正規化といってもSTEPがある。*詳細は後述する。

### 物理設計
1. テーブル定義: 概念スキーマをもとにテーブルを作成していく作業
2. インデックス定義: パフォーマンスに関わる重要な概念
3. ハードウェアのサイジング: HWに関する要件を決定する。性能問題のほとんどはI/Oがネックとなる。
更にキャパシティとパフォーマンスの2つの要素のサイジングがある。
  1. キャパシティ
  データ量は運用年数に伴い増えるのが普通だが、正確に見積もるのが難しい場合もある。
  その場合のアプローチは2つある。
    1. 安全率を大きくとって、余裕を持たせたサイジングを行う。
    2. 仮に後で容量が不足した場合に、簡単に記憶装置を追加できるような構成にしておく。（スケーラビリティが高い）
  2. パフォーマンス
  2つの指標を使って定義する。
    1. 処理時間: 何秒以内に終了すること
    2. スループット: 単位時間あたりにどれだけの処理をシステムがこなせるか
  要するに＂どれだけ速いか＂と＂どれだけ多いか＂
4. ストレージの冗長構成決定: RAIDなどの冗長構成を決定する。RAIDにもいくつか種類があるが、それぞれに長所と短所がある。
5. ファイルの物理配置決定: テーブルのデータファイルとインデックスファイルの配置を決定する。I/Oのボトルネックを解消するために、ファイルの配置を工夫する。

#### バックアップ
バックアップにもいくつか種類がある。
1. フルバックアップ
2. 差分バックアップ
3. 増分バックアップ
が存在するが、バックアップコストとリカバリコストのトレードオフがあるため
どれがよいかはシステムの要件による。

#### リカバリ
単純にバックアップをとっていればその▼状態に戻すことができるが、
バックアップをとった地点から現在地点に至るまでユーザーの更新が行われていた場合
それを反映する必要がある。
それはトランザクションログから行われる。

## 第3章 論理設計と正規化

## 第4章 ER図（複数のテーブルのリレーションの関係を表現する）

# まとめ

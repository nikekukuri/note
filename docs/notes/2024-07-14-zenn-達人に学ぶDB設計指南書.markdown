# 初めに
DB設計を学ぶにあたり"達人に学ぶDB設計指南書"を読んでいる。
理解を深めるために、読んだ内容を自分なりにまとめていく。

# 内容
## 第1章 システムとデータベース
### 用語の定義
* DBMS
* SQL
* スキーマ(Scheme): 枠組みや構図という意味を持つ。DBにおいてはデータ構造やフォーマットという意味を持つ。
* エンティティ(Entity): 実体のこと
* ER図
### DBにおける設計とは
:::note info 基本的にDBMSが異なっても設計の方法は影響を受けない。
1. 要件定義: 何をデータベースを使ってやりたいかを決める。 例: Amazonの在庫管理やツイッターのツイート本文やリプライいいね数など
2. 設計: データベースの構造を決める。細分化したものを後述する。 例: テーブルの数、カラムの数、カラムの型、インデックスの有無
3. 開発（実装）: 実際にシステムを作る。プログラムのコーディングや物理サーバーやネットワーク機器の調達なども含まれる。
4. テスト: 組み上がったシステムが実用に耐えうる品質であるかを試験する。
:::

本書は設計に焦点を当てている。

### DBMSの種類
* RDB(Relational DataBase 関係データベース): 現在最も広く利用されているデータベース。何も断りをなく＂データベース＂と言うと、リレーショナルデータベースのことを指す。
* OODB(Object Oriented Database オブジェクト指向データベース): 
* XMLDB(XML Database): XMLというタグでデータ管理を行うマークアップ言語形式でデータを保存する
* KVS(Key Value Store): データをKeyとValueの組み合わせだけの単純なデータ型で表現するデータベース
* 階層型データベース(略称は特になし): データを階層構造（木構造）で表現するデータベース

### 主なDBMSフレームワーク
* Oracle
* SQL Server
* PostgreSQL
* MySQL

### スキーマとは
:::note info ここは絵を描きたい
* 外部スキーマ: ユーザーが見るデータの構造（要件定義）
* 概念スキーマ: 開発者が見るデータの構造。物理層の制約にとらわれない。（論理設計）
* 内部スキーマ: データベース管理者/コンピュータが見るデータの構造
:::

:::note info 概念スキーマがないと変更に弱くなる
なぜ？を書く
:::

## 第2章 論理設計と物理設計
#### 論理設計
エンティティとは
1. エンティティの抽出
2. エンティティの定義
3. 正規化
4. ER図の作成

## 第3章 論理設計と正規化

## 第4章 ER図（複数のテーブルのリレーションの関係を表現する）

# まとめ
